{"version":3,"sources":["components/NotificationMessage/NotificationMessage.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["NotificationMessage","text","className","s","Statistics","good","neutral","bad","countTotalFeedbacks","countPositiveFeedbackPercentage","defaultProps","FeedbackOptions","options","onLeaveFeedback","button_list","map","option","onClick","e","type","button","shortid","generate","Section","title","children","container","App","useState","setGood","setNeutral","setBad","target","textContent","state","totalFeedbacks","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mSAEe,SAASA,EAAT,GAAwC,IAATC,EAAQ,EAARA,KAC1C,OAAO,mBAAGC,UAAWC,IAAEF,KAAhB,SAAuBA,ICCnB,SAASG,EAAT,GAMX,IALAC,EAKD,EALCA,KACAC,EAID,EAJCA,QACAC,EAGD,EAHCA,IACAC,EAED,EAFCA,oBACAC,EACD,EADCA,gCAEA,OACI,mCACKD,IAAwB,EACrB,qCACI,oBAAGN,UAAWC,IAAEF,KAAhB,mBAA6BI,KAC7B,oBAAGH,UAAWC,IAAEF,KAAhB,sBAAgCK,KAChC,oBAAGJ,UAAWC,IAAEF,KAAhB,kBAA4BM,KAC5B,oBAAGL,UAAWC,IAAEF,KAAhB,oBAA8BO,OAC9B,oBAAGN,UAAWC,IAAEF,KAAhB,iCACyBQ,EAAgCD,KADzD,WAKJ,cAACR,EAAD,MDlBhBA,EAAoBU,aAAe,CAC/BT,KAAM,qB,qCEDK,SAASU,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACI,qBAAKX,UAAWC,IAAEW,YAAlB,SAEQF,EAAQG,KAAI,SAAAC,GAAM,OACd,wBACIC,QAAS,SAACC,GAAD,OAAOL,EAAgBK,IAChCC,KAAK,SACLjB,UAAWC,IAAEiB,OAHjB,SAMKJ,GAFIK,IAAQC,iB,oBCZtB,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,sBAAKvB,UAAWC,IAAEuB,UAAlB,UACKF,GAAS,oBAAItB,UAAWC,IAAEqB,MAAjB,SAAyBA,IAClCC,KCAE,SAASE,IACpB,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBwB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOrB,EAAP,KAAYwB,EAAZ,KA2BA,OACI,qCACI,cAACR,EAAD,CAASC,MAAM,wBAAf,SACI,cAACb,EAAD,CAAiBC,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBA3B1C,SAAAK,GAEpB,OADwBA,EAAEc,OAAlBC,aAEJ,IAAK,OACDJ,GAAQ,SAAAK,GAAK,OAAIA,EAAQ,KACzB,MACJ,IAAK,UACDJ,GAAW,SAAAI,GAAK,OAAIA,EAAQ,KAC5B,MACJ,IAAK,MACDH,GAAO,SAAAG,GAAK,OAAIA,EAAQ,KACxB,MACJ,QACI,aAgBJ,cAACX,EAAD,CAASC,MAAM,aAAf,SACI,cAACpB,EAAD,CACIC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,oBAhBY,kBACxBH,EAAOC,EAAUC,GAgBLE,gCAbwB,SAAA0B,GAAc,OAClDC,KAAKC,MAAOhC,EAAO8B,EAAkB,aChC7CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,YAAc,qCAAqC,OAAS,kC,kBCA9ED,EAAOC,QAAU,CAAC,UAAY,6B","file":"static/js/main.a69b7c33.chunk.js","sourcesContent":["import s from './NotificationMessage.module.css';\r\n\r\nexport default function NotificationMessage({ text }) {\r\n    return <p className={s.text}>{text}</p>;\r\n}\r\n\r\nNotificationMessage.defaultProps = {\r\n    text: 'No feedback given',\r\n};","import s from './Statistics.module.css';\r\nimport NotificationMessage from '../NotificationMessage';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Statistics({\r\n    good,\r\n    neutral,\r\n    bad,\r\n    countTotalFeedbacks,\r\n    countPositiveFeedbackPercentage,\r\n}) {\r\n    return (\r\n        <>\r\n            {countTotalFeedbacks() > 0 ? (\r\n                <>\r\n                    <p className={s.text}>Good: {good}</p>\r\n                    <p className={s.text}>Neutral: {neutral}</p>\r\n                    <p className={s.text}>Bad: {bad}</p>\r\n                    <p className={s.text}>Total: {countTotalFeedbacks()}</p>\r\n                    <p className={s.text}>\r\n                        Positive feedbacks: {countPositiveFeedbackPercentage(countTotalFeedbacks())} %\r\n                    </p>\r\n                </>\r\n            ) : (\r\n                <NotificationMessage />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    countTotalFeedbacks: PropTypes.func,\r\n    countPositiveFeedbackPercentage: PropTypes.func,\r\n};","\r\nimport s from './FeedbackOptions.module.css';\r\nimport shortid from 'shortid';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n    return (\r\n        <div className={s.button_list}>\r\n            {\r\n                options.map(option => (\r\n                    <button\r\n                        onClick={(e) => onLeaveFeedback(e)}\r\n                        type=\"button\"\r\n                        className={s.button}\r\n                        key={shortid.generate()}\r\n                    >\r\n                        {option}\r\n                    </button>\r\n                ))\r\n            }\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func,\r\n};","import s from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n    return (\r\n        <div className={s.container}>\r\n            {title && <h3 className={s.title}>{title}</h3>}\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.any,\r\n};","\r\nimport { useState } from 'react';\r\nimport Statistics from './components/Statistics';\r\nimport FeedbackOptions from './components/FeedbackOptions';\r\nimport Section from './components/Section';\r\n\r\n\r\nexport default function App() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n\r\n\r\n    const handleIncrement = e => {\r\n        const { textContent } = e.target;\r\n        switch (textContent) {\r\n            case 'good':\r\n                setGood(state => state + 1);\r\n                break;\r\n            case 'neutral':\r\n                setNeutral(state => state + 1);\r\n                break;\r\n            case 'bad':\r\n                setBad(state => state + 1);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n\r\n    const countTotalFeedbacks = () =>\r\n        good + neutral + bad;\r\n\r\n\r\n    const countPositiveFeedbackPercentage = totalFeedbacks =>\r\n        Math.round((good / totalFeedbacks) * 100);\r\n    return (\r\n        <>\r\n            <Section title=\"Please leave feedback\">\r\n                <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={handleIncrement} />\r\n            </Section>\r\n            <Section title=\"Statistics\">\r\n                <Statistics\r\n                    good={good}\r\n                    neutral={neutral}\r\n                    bad={bad}\r\n                    countTotalFeedbacks={countTotalFeedbacks}\r\n                    countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\r\n                />\r\n            </Section>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_list\":\"FeedbackOptions_button_list__2nXWt\",\"button\":\"FeedbackOptions_button__3SqFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1OM9I\"};"],"sourceRoot":""}